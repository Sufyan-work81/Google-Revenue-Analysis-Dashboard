# -*- coding: utf-8 -*-
"""google 2000 to 2025 revenue growth Dashborad.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sZRH6Bbr3Hfd8eF9EVMxpmwNIhEKuz0s
"""

# Install required libraries
!pip install dash pandas plotly dash-bootstrap-components

import dash
from dash import dcc, html, Input, Output, callback
import dash_bootstrap_components as dbc
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np

# Generate synthetic revenue data (2000-2025)
np.random.seed(42)
years = list(range(2000, 2026))
revenue = [400 + 0.5*(year-2000)**2 + 300*np.random.rand() for year in years]

# Create DataFrame
df = pd.DataFrame({
    'Year': years,
    'Revenue (Billions USD)': [round(r, 2) for r in revenue],
    'Growth Rate (%)': [0] + [round((revenue[i] - revenue[i-1])/revenue[i-1]*100, 2) for i in range(1, len(revenue))]
})

# Generate synthetic country revenue data
countries = ['USA', 'China', 'Japan', 'Germany', 'UK', 'India', 'Pakistan', 'Russia', 'France', 'Brazil', 'Canada', 'Australia']
country_data = []
for year in years:
    for country in countries:
        country_data.append({
            'Year': year,
            'Country': country,
            'Revenue (Billions USD)': round(np.random.uniform(10, 100), 2)
        })
country_df = pd.DataFrame(country_data)

# Initialize Dash app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
app.title = "Google Revenue Analysis (2000-2025)"

# Dashboard layout
app.layout = dbc.Container([
    # Author Name
    dbc.Row([
        dbc.Col(html.H4("Author: Sufyan Ahmad", className="text-center my-2"), width=12)
    ]),
    # Header
    dbc.Row([
        dbc.Col(html.H1("Google Revenue Dashboard", className="text-center my-4"), width=12)
    ]),

    # Key Metrics Cards
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("Latest Revenue"),
                dbc.CardBody([
                    html.H4(f"${df.iloc[-1,1]}B", className="card-title"),
                    html.P(f"Year: {df.iloc[-1,0]}", className="card-text")
                ])
            ], className="shadow-sm")
        ], md=4),

        dbc.Col([
            dbc.Card([
                dbc.CardHeader("Avg. Annual Growth"),
                dbc.CardBody([
                    html.H4(f"{df['Growth Rate (%)'].mean():.2f}%", className="card-title"),
                    html.P("2000-2025", className="card-text")
                ])
            ], className="shadow-sm")
        ], md=4),

        dbc.Col([
            dbc.Card([
                dbc.CardHeader("Total Growth"),
                dbc.CardBody([
                    html.H4(f"{((df.iloc[-1,1] - df.iloc[0,1])/df.iloc[0,1]*100):.2f}%", className="card-title"),
                    html.P("2000-2025", className="card-text")
                ])
            ], className="shadow-sm")
        ], md=4)
    ], className="mb-4"),

    # Charts and Controls
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("Time Range Selector"),
                dbc.CardBody([
                    dcc.RangeSlider(
                        id='year-slider',
                        min=2000,
                        max=2025,
                        value=[2000, 2025],
                        marks={str(year): str(year) for year in range(2000, 2026, 5)},
                        step=1
                    )
                ])
            ], className="mb-4 shadow-sm"),

            dbc.Card([
                dbc.CardHeader("Revenue Growth Analysis"),
                dbc.CardBody([
                    dcc.Graph(id='revenue-chart', style={'height': '400px'})
                ])
            ], className="shadow-sm")
        ], md=7),

        dbc.Col([
            dbc.Card([
                dbc.CardHeader("Growth Rate Analysis"),
                dbc.CardBody([
                    dcc.Graph(id='growth-chart', style={'height': '300px'})
                ])
            ], className="mb-4 shadow-sm"),

            dbc.Card([
                dbc.CardHeader("Revenue Distribution"),
                dbc.CardBody([
                    dcc.Graph(id='revenue-distribution', style={'height': '300px'})
                ])
            ], className="shadow-sm")
        ], md=5)
    ]),

    # World Map
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("Country Revenue Map"),
                dbc.CardBody([
                    dcc.Graph(id='world-map', style={'height': '600px'})
                ])
            ], className="shadow-sm")
        ], width=12)
    ], className="mb-4")
], fluid=True)

# Callbacks for interactivity
@callback(
    [Output('revenue-chart', 'figure'),
     Output('growth-chart', 'figure'),
     Output('revenue-distribution', 'figure'),
     Output('world-map', 'figure')],
    [Input('year-slider', 'value')]
)
def update_charts(selected_years):
    filtered_df = df[(df['Year'] >= selected_years[0]) & (df['Year'] <= selected_years[1])]
    filtered_country_df = country_df[(country_df['Year'] >= selected_years[0]) & (country_df['Year'] <= selected_years[1])]

    # Revenue Trend Chart
    revenue_fig = px.line(
        filtered_df,
        x='Year',
        y='Revenue (Billions USD)',
        title='Annual Revenue',
        markers=True
    )
    revenue_fig.update_layout(
        hovermode='x unified',
        yaxis_title="Revenue (Billions USD)",
        template='plotly_white'
    )

    # Growth Rate Chart
    growth_fig = px.bar(
        filtered_df,
        x='Year',
        y='Growth Rate (%)',
        title='Year-over-Year Growth',
        color='Growth Rate (%)',
        color_continuous_scale='RdYlGn'
    )
    growth_fig.update_layout(
        template='plotly_white',
        coloraxis_showscale=False
    )

    # Revenue Distribution Chart
    dist_fig = px.box(
        filtered_df,
        y='Revenue (Billions USD)',
        title='Revenue Distribution',
        points='all'
    )
    dist_fig.update_layout(template='plotly_white')

    # World Map
    map_fig = px.choropleth(
        filtered_country_df,
        locations='Country',
        locationmode='country names',
        color='Revenue (Billions USD)',
        hover_name='Country',
        color_continuous_scale=px.colors.sequential.Plasma,
        title='Country-wise Revenue'
    )
    map_fig.update_layout(
        geo=dict(
            showframe=False,
            showcoastlines=False,
            projection_type='equirectangular'
        )
    )

    return revenue_fig, growth_fig, dist_fig, map_fig

# Run the app
if __name__ == '__main__':
    app.run(debug=True, port=8050)

!pip install -U plotly kaleido

!pip install -U plotly kaleido
!plotly_get_chrome
import os

# Create a directory to save the SVG files
if not os.path.exists("svgs"):
    os.mkdir("svgs")

# Create the figures
filtered_df = df[(df['Year'] >= 2000) & (df['Year'] <= 2025)]
filtered_country_df = country_df[(country_df['Year'] >= 2000) & (country_df['Year'] <= 2025)]

revenue_fig = px.line(
    filtered_df,
    x='Year',
    y='Revenue (Billions USD)',
    title='Annual Revenue',
    markers=True
)
revenue_fig.update_layout(
    hovermode='x unified',
    yaxis_title="Revenue (Billions USD)",
    template='plotly_white'
)

growth_fig = px.bar(
    filtered_df,
    x='Year',
    y='Growth Rate (%)',
    title='Year-over-Year Growth',
    color='Growth Rate (%)',
    color_continuous_scale='RdYlGn'
)
growth_fig.update_layout(
    template='plotly_white',
    coloraxis_showscale=False
)

dist_fig = px.box(
    filtered_df,
    y='Revenue (Billions USD)',
    title='Revenue Distribution',
    points='all'
)
dist_fig.update_layout(template='plotly_white')

map_fig = px.choropleth(
    filtered_country_df,
    locations='Country',
    locationmode='country names',
    color='Revenue (Billions USD)',
    hover_name='Country',
    color_continuous_scale=px.colors.sequential.Plasma,
    title='Country-wise Revenue'
)
map_fig.update_layout(
    geo=dict(
        showframe=False,
        showcoastlines=False,
        projection_type='equirectangular'
    )
)

# Save the figures as SVG files
revenue_fig.write_image("svgs/revenue_chart.svg")
growth_fig.write_image("svgs/growth_chart.svg")
dist_fig.write_image("svgs/revenue_distribution.svg")
map_fig.write_image("svgs/world_map.svg")